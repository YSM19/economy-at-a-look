# .github/workflows/deploy.yml

name: CI/CD for Spring Boot App

on:
  push:
    branches: [ "master" ] # master 브랜치에 푸시될 때마다 실행

env:
  AWS_REGION: ap-northeast-2 # 본인의 AWS 리전
  ECR_REPOSITORY: backend/myserver # 실제 ECR 리포지토리 이름
  EC2_USERNAME: ubuntu # EC2 기본 사용자명 (ubuntu가 일반적)

jobs:
  build-and-push-to-ecr:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      # 이 잡의 결과를 다른 잡으로 전달하기 위한 설정
      image_uri: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./economy/gradlew
      - name: Build with Gradle
        working-directory: ./economy
        run: ./gradlew bootJar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} # 커밋 해시를 이미지 태그로 사용
        run: |
          cd economy
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push-to-ecr # build-and-push-to-ecr 작업이 성공해야 실행
    runs-on: ubuntu-latest

    steps:
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 인스턴스에서 실행될 스크립트
            # 1. AWS ECR에 로그인 (ECR 레지스트리 주소가 필요함)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
            
            # 2. 최신 이미지 pull (needs context를 사용하여 이전 잡의 output을 가져옴)
            docker pull ${{ needs.build-and-push-to-ecr.outputs.image_uri }}
            
            # 3. 기존 컨테이너가 있으면 중지하고 삭제
            if [ $(docker ps -a -q -f name=backend) ]; then
                docker stop backend
                docker rm backend
            fi
            
                         # 4. 새로운 컨테이너 실행 (환경변수 포함)
             docker run -d --name backend -p 8080:8080 \
               -e SPRING_PROFILES_ACTIVE=prod \
               -e DB_HOST=${{ secrets.DB_HOST }} \
               -e DB_PORT=${{ secrets.DB_PORT }} \
               -e DB_NAME=${{ secrets.DB_NAME }} \
               -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
               -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
               -e KOREAEXIM_API_KEY=${{ secrets.KOREAEXIM_API_KEY }} \
               -e ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }} \
               ${{ needs.build-and-push-to-ecr.outputs.image_uri }}